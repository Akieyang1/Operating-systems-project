#!/bin/bash

PCRON_DIR="/etc/pcron"
ALLOW_FILE="/etc/pcron.allow"
DENY_FILE="/etc/pcron.deny"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# 检查权限
check_permission() {
    # 自动处理冲突文件
    if [ -f "$ALLOW_FILE" ] && [ -f "$DENY_FILE" ]; then
        rm -f "$DENY_FILE"
        whiptail --title "Conflit de configuration" --msgbox "Fichiers allow et deny détectés simultanément\n$DENY_FILE a été supprimé" 10 60
    elif [ ! -f "$ALLOW_FILE" ] && [ ! -f "$DENY_FILE" ]; then
        touch "$ALLOW_FILE"
        whiptail --title "Configuration initiale" --msgbox "Aucun fichier d'autorisation trouvé\nFichier allow par défaut créé : $ALLOW_FILE" 10 60
    fi

    if [ "$EUID" -eq 0 ]; then
        return 0
    fi

    if [ -f "$ALLOW_FILE" ]; then
        if ! grep -qw "$USER" "$ALLOW_FILE"; then
            whiptail --title "Permission refusée" --msgbox "L'utilisateur $USER n'a pas la permission d'utiliser pcrontab" 8 60
            exit 1
        fi
    else
        if grep -qw "$USER" "$DENY_FILE"; then
            whiptail --title "Permission refusée" --msgbox "L'utilisateur $USER est interdit d'utiliser pcrontab" 8 60
            exit 1
        fi
    fi
}

# 显示任务列表
show_list() {
    local file="$1"
    if [ -f "$file" ]; then
        whiptail --title "Liste des tâches - $file" --textbox "$file" 20 80 \
        --scrolltext --ok-button "Retour"
    else
        whiptail --title "Erreur" --msgbox "Aucun fichier pcrontab trouvé. Veuillez d'abord en créer un." 8 60
    fi
}

# 新版编辑函数
edit_with_vim() {
    local file="$1"
    local temp_file="/tmp/pcrontab_temp.$$"
    
    # 保留原有内容或创建新文件
    cp "$file" "$temp_file" 2>/dev/null || touch "$temp_file"
    
    # 生成带语法高亮的临时文件
    echo -e "# Explication du format horaire :
# Champ 1: Secondes (0-59)  | Ex: */15 = toutes les 15s
# Champ 2: Minutes (0-59)    | Ex: 0,15,30,45
# Champ 3: Heures (0-23)    | Ex: 8-18
# Champ 4: Jour (1-31)      | Ex: 1,15
# Champ 5: Mois (1-12)      | Ex: */3
# Champ 6: Semaine (0-6)    | 0=Dimanche
# Champ 7: Commande (chemin absolu requis)
" > "$temp_file"
    grep -v '^#' "${file}" 2>/dev/null >> "$temp_file"

    # 使用vim编辑
    vim "+set syntax=crontab" "+set number" "+set autoindent" "$temp_file"
    
    # 格式验证
    while ! validate_crontab "$temp_file"; do
        vim "+set syntax=crontab" "+set number" "+set autoindent" "$temp_file"
    done
    
    # 保存有效内容
    grep -v '^#' "$temp_file" > "$file"
    rm -f "$temp_file"
}

# 格式验证函数
validate_crontab() {
    local file="$1"
    local line_num=0
    
    while IFS= read -r line; do
        ((line_num++))
        
        # 跳过空行和注释
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        
        # 去除行尾注释
        line=$(echo "$line" | sed 's/#.*$//')
        [[ -z "$line" ]] && continue  # 处理纯注释行

        # 分割字段
        IFS=$' \t' read -r -a fields <<< "$line"
        if [ ${#fields[@]} -lt 7 ]; then
            whiptail --title "Échec de validation" --msgbox "Ligne ${line_num}: Nombre de champs incorrect (7 requis)\nContenu: $line" 10 60
            return 1
        fi
        
        # 验证时间字段
        for i in {0..5}; do
            if ! [[ "${fields[$i]}" =~ ^[0-9*/-,]+|([0-9]+~)+[0-9]+$ ]]; then
                whiptail --title "Échec de validation" --msgbox "Ligne ${line_num}: Champ $((i+1)) invalide\nContenu: ${fields[$i]}" 10 60
                return 1
            fi
        done
    done < "$file"
    
    return 0
}

# 权限文件管理函数
manage_permission_files() {
    while true; do
        # 自动检测当前模式
        if [ -f "$ALLOW_FILE" ]; then
            current_mode="allow"
            current_file="$ALLOW_FILE"
        else
            current_mode="deny"
            current_file="$DENY_FILE"
        fi

        choice=$(whiptail --title "Gestion des autorisations ($current_mode)" --menu "Options :" 15 60 4 \
        "1" "Changer mode (allow/deny)" \
        "2" "Éditer fichier" \
        "3" "Voir fichier" \
        "0" "Retour" 3>&1 1>&2 2>&3)

        case $choice in
            1)
                new_mode=$(whiptail --title "Changer mode" --radiolist "Choisir le nouveau mode :" 15 60 2 \
                "allow" "Mode blanc" $([ "$current_mode" = "allow" ] && echo "ON" || echo "OFF") \
                "deny" "Mode noir" $([ "$current_mode" = "deny" ] && echo "ON" || echo "OFF") 3>&1 1>&2 2>&3)

                if [ "$new_mode" = "allow" ]; then
                    rm -f "$DENY_FILE"
                    touch "$ALLOW_FILE"
                    create_user_files
                else
                    rm -f "$ALLOW_FILE"
                    touch "$DENY_FILE"
                    create_user_files
                fi
                ;;
            2)
                vim "$current_file"
                create_user_files
                ;;
            3)
                whiptail --title "Contenu du fichier ($current_file)" --textbox "$current_file" 20 80
                ;;
            0)
                return
                ;;
        esac
    done
}

# 主菜单
main_menu() {
    while true; do
        # 管理员菜单判断
        if [ "$EUID" -eq 0 ]; then
            choice=$(whiptail --title "pcron  Gestion des tâches" --menu "Choisissez l'opération :" 15 60 5 \
            "1" "Voir tâches globales" \
            "2" "Éditer tâches globales" \
            "3" "Supprimer tâches globales" \
            "4" "Gérer les autorisations" \
            "0" "Quitter" 3>&1 1>&2 2>&3)
        else
            choice=$(whiptail --title "pcron  Gestion des tâches" --menu "Choisissez l'opération :" 15 60 4 \
            "1" "Voir mes tâches" \
            "2" "Éditer mes tâches" \
            "3" "Supprimer mes tâches" \
            "0" "Quitter" 3>&1 1>&2 2>&3)
        fi

        case $choice in
            1)
                show_list "$PCRONTAB_FILE"
                ;;
            2)
                edit_with_vim "$PCRONTAB_FILE"
                ;;
            3)
                if (whiptail --title "Confirmer la suppression" --yesno "Êtes-vous sûr de vouloir supprimer toutes les tâches ?" 8 60); then
                    echo "" > "$PCRONTAB_FILE"
                    whiptail --title "Succès" --msgbox "pcrontab  fichier supprimé." 8 60
                fi
                ;;
            4)
                manage_permission_files
                ;;
            0)
                exit 0
                ;;
            *)
                exit 1
                ;;
        esac
    done
}

# 初始化界面
init_ui() {
    if [ "$EUID" -eq 0 ]; then
        PCRONTAB_FILE="$PCRON_DIR/pcrontab"
    else
        PCRONTAB_FILE="$PCRON_DIR/pcrontab$USER"
    fi

    check_permission
    main_menu
}

# 列出任务
list_crontab() {
    if [ -f "$1" ]; then
        cat "$1"
    else
        echo "Aucun fichier pcrontab trouvé."
    fi
}

# 编辑任务
edit_crontab() {
    TEMP_FILE="/tmp/pcrontab_temp"
    cp "$1" "$TEMP_FILE" 2>/dev/null
    if [ $? -ne 0 ]; then
        touch "$TEMP_FILE"
    fi
    # 使用 Vim 进行编辑
    vim "$TEMP_FILE"
    # 保存修改
    cp "$TEMP_FILE" "$1" || echo "Échec de déplacement du fichier, veuillez essayer d'exécuter sudo"
    rm "$TEMP_FILE"
    echo "pcrontab mis à jour."
}

# 删除任务
remove_crontab() {
    if [ -f "$1" ]; then
        echo "" > "$1"
        echo "pcrontab fichier supprimé."
    else
        echo "Aucun fichier pcrontab trouvé."
    fi
}

# 创建用户文件
create_user_files() {
    if [ -f "$ALLOW_FILE" ]; then
        while IFS= read -r user; do
            touch "$PCRON_DIR/pcrontab$user"
            chown $user "$PCRON_DIR/pcrontab$user"
        done < "$ALLOW_FILE"
    else
        getent passwd | cut -d: -f1 | while read -r user; do
            if ! grep -qw "$user" "$DENY_FILE"; then
                touch "$PCRON_DIR/pcrontab$user"
                chown $user "$PCRON_DIR/pcrontab$user"
            fi
        done
    fi
}

# 参数处理
if [ $# -eq 0 ]; then
    init_ui
    
else
    # 解析命令行参数
    TARGET_USER="$USER"
    
    while getopts ":u:ler" opt; do
        case $opt in
            u) TARGET_USER="$OPTARG" ;;
            l) ACTION="list" ;;
            e) ACTION="edit" ;;
            r) ACTION="remove" ;;
            \?) echo "Option invalide: -$OPTARG" >&2; exit 1 ;;
        esac
    done
    
    # 切换用户逻辑（保持原有实现）
    if [ "$TARGET_USER" != "$USER" ]; then
        [ "$EUID" -ne 0 ] && echo "Besoin de privilèges root" && exit 1
    fi
        PCRONTAB_FILE="$PCRON_DIR/pcrontab$TARGET_USER"
    
    check_permission
    case $ACTION in
        list) list_crontab "$PCRONTAB_FILE" ;;
        edit) edit_crontab "$PCRONTAB_FILE";;
        remove) remove_crontab "$PCRONTAB_FILE" ;;
        *) echo "Utilisation: pcrontab [-u utilisateur] {-l | -e | -r}" ;;
    esac
fi

exit 0
